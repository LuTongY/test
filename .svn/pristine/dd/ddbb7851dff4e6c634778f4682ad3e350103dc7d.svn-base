<template>
	<el-container style="height:500px;border: 1px solid #e8eaec;">
		<el-header>
			<vxe-toolbar ref="TaskToolbar">
				<template #buttons>
					<el-row>
						<el-col :span="6">
							<!-- 
							<vxe-input v-model.trim="search.productNo" placeholder="生产订单号"></vxe-input>
							<vxe-input v-model.trim="search.invName" placeholder="子件名称"></vxe-input>
							<vxe-button status="primary" @click="page_list">搜索</vxe-button>
							<vxe-button @click="DownExcel">导出</vxe-button>
							-->
						</el-col>
						<el-col :span="10" class="task-header-nav">
							<text v-if="mode == 'month'">月制造令</text>
							<text v-if="mode == 'week'">周制造令</text>
							<i class="vxe-icon--caret-left" @click="setPrev"></i>
							<span>{{ headerTitle }}</span>
							<i class="vxe-icon--caret-right" @click="setNext"></i>
						</el-col>
					</el-row>
				</template>
			</vxe-toolbar>
		</el-header>
		<el-main>
			<vxe-table :data="tableData" highlight-current-row highlight-hover-row height="auto" border="full"
				ref="Task" :print-config="{}" resizable show-overflow @cell-click="cellClickEvent"
				:expand-config="{ lazy: true, loadMethod: loadContentMethod }" :auto-resize="$store.state.autoResize"
				:checkbox-config="{ checkField: 'checked', trigger: 'row', range: true, highlight: true, }"
				:edit-config="{ trigger: 'click', mode: 'cell' }">
				<vxe-column type="checkbox" width="50" align="center"></vxe-column>
				<vxe-table-column field="taskCraftId" title="ID" width="80px" align="center"></vxe-table-column>
				<vxe-table-column field="workshopName" title="车间名称" width="100px" align="center"></vxe-table-column>
				<vxe-table-column field="productNo" title="生产订单号" width="140px"></vxe-table-column>
				<vxe-table-column field="productCode" title="成品编码" width="130px"></vxe-table-column>
				<vxe-table-column field="productName" title="成品名称" width="150px"></vxe-table-column>
				<vxe-table-column field="series" title="系列" width="100px" align="center"></vxe-table-column>
				<vxe-table-column field="planQty" title="排产数量" width="80px" align="right"></vxe-table-column>
				<vxe-table-column field="qualifyQty" title="已入库数量" width="100px" align="right"></vxe-table-column>
				<vxe-table-column field="invCode" title="子件编码" width="120px"></vxe-table-column>
				<vxe-table-column field="invName" title="子件名称" width="250px"></vxe-table-column>
				<vxe-table-column field="craftName" title="工艺" width="90px"></vxe-table-column>
				<vxe-table-column field="quantity" title="数量(子件)" width="110px" align="right"
					:edit-render="{ name: 'input', attrs: { type: 'number' }, events: { change: checkQuantity } }">
				</vxe-table-column>
				<vxe-table-column field="packDate" title="包装日期" width="100px"></vxe-table-column>
				<vxe-table-column field="produceDate" title="生产日期" width="100px"></vxe-table-column>
				<vxe-table-column field="pipeLongStd" title="长管规格(mm)" width="130px" v-if="showPipe"></vxe-table-column>
				<vxe-table-column field="pipeShortLength" title="短管管长(mm)" width="120px" align="right" v-if="showPipe">
				</vxe-table-column>
				<vxe-table-column field="pipeLongLength" title="长管长度(m)" width="110px" align="right" v-if="showPipe">
				</vxe-table-column>
				<vxe-table-column field="status" title="状态" align="center" width="90px">
					<template #default="{ row }">
						<el-button type="success" size='mini' v-if="row.status == '已生成'">{{ row.status }}</el-button>
						<el-button type="warning" size='mini' v-else>{{ row.status }}</el-button>
					</template>
				</vxe-table-column>
			</vxe-table>
		</el-main>
		<el-footer>
			<page ref="page_data" :totalCount="totalCount" @page_list="page_list" />
		</el-footer>
	</el-container>

</template>
<script>
import page from "@/components/page/page.vue";
export default {
	name: "TaskCraftCommon",
	components: {
		page,
	},
	props: ['mode', 'workshop'],
	data() {
		let data = {
			search: {},
			totalCount: 0,
			tableData: [],
			selectedIds: {},
			select_id: "",
			auto: true,
			lazy: true,
			headerTitle: '',
			showPipe: false,
			originData: [],
		}
		if (this.workshop) {
			data.search.workshopName = this.workshop;
			data.showPipe = this.workshop == '制管车间';
		}
		let date = new Date();
		let year = date.getFullYear();
		let month = date.getMonth() + 1;
		let day = date.getDate();

		if (this.mode == 'month') { // 月制造令
			let array = this.getSearchMonthDate(year, month);
			data.headerTitle = array[0] + '-' + array[1];
			data.search.produceDate = [array[2], array[3]];
		} else if (this.mode == 'week') { // 周制造令
			let week = date.getDay();
			week = week == 0 ? 7 : week;

			let startDate = this.getPrevNextDate(year, month, day - week + 1);
			let endDate = this.getPrevNextDate(year, month, day + 7 - week);

			data.headerTitle = startDate + ' 至 ' + endDate;
			data.search.produceDate = [startDate, endDate];
		}
		return data;
	},
	mounted() {
		this.page_list();
	},
	created() {
		this.$nextTick(() => {
			// 手动将表格和工具栏进行关联
			this.$refs.Task.connect(this.$refs.TaskToolbar)
		})
	},
	methods: {
		checkQuantity(e) {
			let quantity = parseInt(e.row.quantity);
			for (let i in this.originData) {
				console.log(this.originData[i].taskCraftId , e.row.taskCraftId , quantity , this.originData[i].quantity)
				if (this.originData[i].taskCraftId == e.row.taskCraftId && quantity > this.originData[i].quantity) {
					this.$message.error("本次加工量不能大于可加工量");
					this.tableData[i].quantity = this.originData[i].quantity;
				}
			}
		},
		cellClickEvent(item) {
			this.select_id = item.row.taskCraftId;
			this.selectedIds[item.row.taskCraftId] = {
				id: item.row.taskCraftId,
				checked: item.row.checked,
				quantity: item.row.quantity,
			};
		},
		getDateFromObject(date) {
			if (!date) {
				date = new Date();
			}
			let year = date.getFullYear();
			let month = date.getMonth() + 1;
			month = month < 10 ? '0' + month : month;
			let day = date.getDate();
			day = day < 10 ? '0' + day : day;
			return year + '-' + month + '-' + day;
		},
		setPrev() {
			if (this.mode == 'month') {
				let startDate = this.search.produceDate[0];
				if (!/^(\d{4})\-(\d{2})/.test(startDate)) {
					this.$message.error('参数错误')
					return false;
				}
				let year = parseInt(RegExp.$1);
				let month = parseInt(RegExp.$2) - 1;
				if (month <= 0) {
					month = 12;
					year -= 1;
				}
				let array = this.getSearchMonthDate(year, month);
				this.headerTitle = array[0] + '-' + array[1];
				this.search.produceDate = [array[2], array[3]];
				this.page_list();
			} else if (this.mode == 'week') {
				let startDate = this.search.produceDate[0];
				if (!/^(\d{4})\-(\d{2})\-(\d{2})$/.test(startDate)) {
					this.$message.error('参数错误')
					return false;
				}
				let year = parseInt(RegExp.$1);
				let month = parseInt(RegExp.$2);
				let day = parseInt(RegExp.$3);

				let start = this.getPrevNextDate(year, month, day - 7);
				let end = this.getPrevNextDate(year, month, day - 1);

				this.headerTitle = start + ' 至 ' + end;
				this.search.produceDate = [start, end];
				this.page_list();
			}
		},
		setNext() {
			if (this.mode == 'month') {
				let startDate = this.search.produceDate[0];
				if (!/^(\d{4})\-(\d{2})/.test(startDate)) {
					this.$message.error('参数错误')
					return false;
				}
				let year = parseInt(RegExp.$1);
				let month = parseInt(RegExp.$2) + 1;
				if (month >= 13) {
					month = 1;
					year += 1;
				}
				let array = this.getSearchMonthDate(year, month);
				this.headerTitle = array[0] + '-' + array[1];
				this.search.produceDate = [array[2], array[3]];
				this.page_list();
			} else if (this.mode == 'week') {
				let endDate = this.search.produceDate[1];
				if (!/^(\d{4})\-(\d{2})\-(\d{2})$/.test(endDate)) {
					this.$message.error('参数错误')
					return false;
				}
				let year = parseInt(RegExp.$1);
				let month = parseInt(RegExp.$2);
				let day = parseInt(RegExp.$3);

				let start = this.getPrevNextDate(year, month, day + 1);
				let end = this.getPrevNextDate(year, month, day + 7);

				this.headerTitle = start + ' 至 ' + end;
				this.search.produceDate = [start, end];
				this.page_list();
			}
		},
		page_list(resetPage) {
			resetPage = resetPage || 0;
			let pagesize = this.$refs.page_data.page_size;
			if (resetPage) {
				this.$refs.page_data.page = 1;
			}
			let page = this.$refs.page_data.page;
			this.api.production.Task.GetListWithCraft(pagesize, page, this.search).then(res => {
				if (res.data.code == 200) {
					this.originData = [];
					let rows = res.data.data.rows;
					for (let i in rows) {
						this.originData.push(rows[i]);
						if (this.selectedIds[rows[i].taskCraftId] && this.selectedIds[rows[i].taskCraftId].checked) {
							rows[i].checked = true;
						} else {
							rows[i].checked = false;
						}
					}
					this.tableData = rows;
					this.totalCount = parseInt(res.data.data.totalCount);

					console.log(this.originData, this.tableData)
				}
			});
		},
		DownExcel() {
			this.api.production.Task.ExportListWithCraft(this.search).then(res => {
				if (res.data.code == 200) {
					this.$message.success(res.data.message)
					window.location.href = res.data.data.exportList[0].url
				}
			})
		},
		getSearchMonthDate(year, month) {
			month = month < 10 ? ('0' + month) : month;
			let lastDay = new Date(year, month, 0).getDate();
			let startDate = year + '-' + month + '-01';
			let endDate = year + '-' + month + '-' + lastDay;
			return [year, month, startDate, endDate]
		},
		getPrevNextDate(year, month, day) {
			let monthLastDay = new Date(year, month, 0).getDate();
			if (day <= 0) {
				month -= 1;
				if (month <= 0) {
					month = 12;
					year -= 1;
				}
				let lastDay = new Date(year, month, 0).getDate();
				day = parseInt(lastDay) + day;
			} else if (day > monthLastDay) {
				day = day - monthLastDay;
				month += 1;
				if (month > 12) {
					month = 1;
					year += 1;
				}
			}
			month = month < 10 ? ('0' + month) : month;
			day = day < 10 ? ('0' + day) : day;
			return year + "-" + month + "-" + day;
		},
	}
};
</script>
<style lang="less" scoped="scoped">
.el-header,
.el-main {
	padding: 0;
	height: auto;
}

.el-footer {
	padding: 10px 0 0 0;
}

.vxe-input {
	margin-right: 8px;
}

.task-header-nav {
	text-align: center;
	font-weight: bold;
	line-height: 34px;
	font-size: 16px;

	i {
		cursor: pointer;
		margin: 0 20px;
		color: #6da8d5;
	}
}
</style>
