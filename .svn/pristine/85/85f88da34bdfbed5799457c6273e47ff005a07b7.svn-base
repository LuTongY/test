<template>
  <div class="about grid-content bg-purple" id="storage"></div>
</template>
 
<script>
import {onMounted,onBeforeUnmount,getCurrentInstance} from "vue";
export default {
  setup() {
  	//生成表格
  	let myChart;
  	const _this=getCurrentInstance().appContext.config.globalProperties;
  	const handleResizeChart=()=>{
  			   myChart.resize()
  	 }
  	onMounted(()=>{
		 clearInterval(changePieInterval);
  		window.addEventListener('resize',handleResizeChart)
  		    // 基于准备好的dom，初始化echarts实例
  		   myChart = _this.$echarts.init(document.getElementById("storage"));
		   let currentIndex = -1; // 当前高亮图形在饼图数据中的下标
		   let changePieInterval = setInterval(selectPie, 2000); // 设置自动切换高亮图形的定时器
  		  //  绘制图表
  			
  			// var PvData = []
  			// for(let i=0;i<7;i++){
  			// 	PvData.push(parseInt(Math.random()*100))
  			// }
			let data=[
  		    	        { value: 1048, name: '传统鞋架' },
  		    	        { value: 735, name: '钢木鞋架' },
  		    	        { value: 580, name: '其它家居' },
  		    	        { value: 484, name: '备品' },
  		    	        { value: 300, name: '钢木家具' }
  		    	      ]
  		    myChart.setOption({
  		    	title:{
  		    		text:'今日入库情况'
  		    	},
  		    	 tooltip: {
  		    	    trigger: 'item'
  		    	  },
  		    	  legend: {
  		    	    top: '40px',
  		    	    left: 'center'
  		    	  },
  		    	  series: [
  		    	    {
  		    	      name: '类型',
  		    		  top:'50',
  		    	      type: 'pie',
  		    	      radius: ['50%', '80%'],
  		    	      avoidLabelOverlap: false,
  		    	      label: {
  		    	        show: false,
  		    	        position: 'center',
						formatter: '{b}:{c}' + '\n\r' + '({d}%)',
  		    	      },
  		    	      emphasis: {
  		    	        label: {
  		    	          show: true,
  		    	          fontSize: '18', //环形图中间文字大小
  		    	          fontWeight: 'bold'
  		    	        }
  		    	      },
  		    	      labelLine: {
  		    	        show: false
  		    	      },
  		    	      data: data
  		    	    }
  		    	  ]
  		    })
			
			
			function highlightPie() { // 取消所有高亮并高亮当前图形
			  for(var idx in data)
			    // 遍历饼图数据，取消所有图形的高亮效果
			    myChart.dispatchAction({
			      type: 'downplay',
			      seriesIndex: 0,
			      dataIndex: idx
			    });
			  // 高亮当前图形
			  myChart.dispatchAction({
			    type: 'highlight',
			    seriesIndex: 0,
			    dataIndex: currentIndex
			  });
			}
			
			myChart.on('mouseover', (params) => { // 用户鼠标悬浮到某一图形时，停止自动切换并高亮鼠标悬浮的图形
			  clearInterval(changePieInterval);
			  currentIndex = params.dataIndex;
			  highlightPie();
			});
			
			myChart.on('mouseout', (params) => { // 用户鼠标移出时，重新开始自动切换
			  changePieInterval = setInterval(selectPie, 2000);
			});
			
			function selectPie() { // 高亮效果切换到下一个图形
			  var dataLen = data.length;
			  currentIndex = (currentIndex + 1) % dataLen;
			  highlightPie();
			}
  	})
  	onBeforeUnmount(()=>{
  		//取消监听
  		window.removeEventListener('resize',handleResizeChart)
  	})
  },
};
</script>
 
<style  scoped>
#storage {
  height: calc(100% - 20px);
  width: calc(100% - 20px);
  background: #fff;
  padding: 10px;
  border-radius: 10px;
}
</style>